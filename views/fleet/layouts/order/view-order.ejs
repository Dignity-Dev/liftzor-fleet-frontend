<!-- Load Google Maps JavaScript API asynchronously -->
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAw4piC98v-jXlof_H979KOr2GRDAaaDDY&callback=initMap" async defer loading="async"></script>
<!-- container-fluid -->
<div class="container-fluid">

    <% if (error) { %>
        <div class="error-message">
            <div class="alert alert-danger" role="alert">
                <strong>Error:</strong>
                <%= error %>
            </div>
        </div>
        <% } else if (order && order.length> 0) { %>
            <!-- Orders Section -->
            <div class="row">
                <!-- Single Order Card -->
                <div class="col-md-4 col-xl-4">
                    <% if (order[0].status==='ConfirmOrder' ) { %>
                        <!-- Button to trigger modal -->
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#assignOrderModal">
                            Assign A Driver
                        </button>
                        <% } %>

                            <!-- Modal structure (optional) -->
                            <div class="modal fade" id="assignOrderModal" tabindex="-1" aria-labelledby="confirmOrderModalLabel" aria-hidden="true">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title">
                                                Assign Order #
                                                <%= order[0].orderID %>
                                            </h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">

                                            <h5>Assign Order to:</h5>
                                            <form action="/assign-driver" method="POST">
                                                <input type="hidden" name="orderID" value="<%= order[0].orderID %>">
                                                <div class="mb-3">
                                                    <div class="form-group">
                                                        <label class="form-label">Driver ID</label>
                                                        <input type="text" class="form-control" name="driverID" placeholder="Enter Driver ID" required>
                                                    </div>
                                                </div>
                                                <button type="submit" class="btn btn-primary">Assign Order</button>
                                            </form>
                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-light" data-bs-dismiss="modal">Close</button>
                                        </div>
                                    </div>
                                </div>
                            </div>






                            <div class="card border shadow-sm mb-4">
                                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                                    <h5 class="card-title mb-0">Order ID: <strong>
                                            <%= order[0].orderID %>
                                        </strong></h5>
                                    <span class="badge bg-warning">
                                        <%= order[0].driverOrderStatus %>
                                    </span>
                                </div>
                                <div class="card-body">
                                    <p><strong>Customer:</strong>
                                        <%= order[0].receiverFullName %>
                                    </p>
                                    <p><strong>Receiver:</strong>
                                        <%= order[0].receiverFullName %>
                                    </p>
                                    <p><strong>Pickup:</strong>
                                        <%= order[0].pickup %>
                                    </p>
                                    <p><strong>Delivery:</strong>
                                        <%= order[0].destination %>
                                    </p>
                                    <p><strong>Weight:</strong>
                                        <%= order[0].weight %>
                                    </p>
                                    <p><strong>Date:</strong>
                                        <%= new Date(order[0].createdAt).toLocaleDateString('en-US', { year: 'numeric' ,
                                            month: 'long' , day: 'numeric' }) %>
                                    </p>
                                    <p><strong>Assigned Status:</strong> <span class="badge bg-danger">
                                            <%= order[0].status %>
                                        </span></p>
                                </div>
                                <div class="card-footer text-center">
                                    <button onclick="window.history.back()" class="btn btn-primary btn-sm">Back</button>
                                </div>
                            </div>
                </div>

                <div class="col-md-8 col-xl-8">
                    <div class="card border shadow-sm mb-4">
                        <div class="card-body">
                            <div id="map" style="height: 400px; width: 100%;"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6 col-xl-4">
                    <div class="card border shadow-sm mb-4">
                        <div class="card-body">
                            <img src="<%= order[0].orderimageUrls %>" alt="" width="100%">
                        </div>
                    </div>
                </div>
            </div>

            <% } else { %>
                <p class="text-muted">No Order information found.</p>
                <% } %>

</div>



<script>
    function initMap() {
        const pickUpLocation = {
            lat: parseFloat("<%= order[0].pickUpLatitude %>"),
            lng: parseFloat("<%= order[0].pickUpLongitude %>"),
        };
        const dropOffLocation = {
            lat: parseFloat("<%= order[0].dropOffLatitude %>"),
            lng: parseFloat("<%= order[0].dropOffLongitude %>"),
        };

        // Initialize the map, centered on the midpoint (for default view)
        const map = new google.maps.Map(document.getElementById("map"), {
            center: {
                lat: (pickUpLocation.lat + dropOffLocation.lat) / 2,
                lng: (pickUpLocation.lng + dropOffLocation.lng) / 2,
            },
            zoom: 6,
        });

        // Add markers for pickup and drop-off locations
        new google.maps.Marker({
            position: pickUpLocation,
            map: map,
            label: "P",
            title: "Pickup Location",
        });

        new google.maps.Marker({
            position: dropOffLocation,
            map: map,
            label: "D",
            title: "Drop-off Location",
        });

        // Fit map bounds to show both markers
        const bounds = new google.maps.LatLngBounds();
        bounds.extend(pickUpLocation);
        bounds.extend(dropOffLocation);
        map.fitBounds(bounds);

        // Create a Polyline manually to draw the route
        const routeLine = new google.maps.Polyline({
            path: [pickUpLocation, dropOffLocation],
            geodesic: true,
            strokeColor: "#FF0000", // Red line
            strokeOpacity: 1.0,
            strokeWeight: 2,
        });
        routeLine.setMap(map);

        // Optionally, use Directions API to calculate the route
        const directionsService = new google.maps.DirectionsService();
        const directionsRenderer = new google.maps.DirectionsRenderer({
            map: map,
            suppressMarkers: true, // Keep only custom markers "P" and "D"
        });

        // Set up directions request to calculate route between pickUp and dropOff
        directionsService.route({
                origin: pickUpLocation,
                destination: dropOffLocation,
                travelMode: google.maps.TravelMode.DRIVING,
            },
            (result, status) => {
                if (status === google.maps.DirectionsStatus.OK) {
                    directionsRenderer.setDirections(result);
                } else {
                    console.error("Error fetching directions:", status);
                }
            }
        );
    }

    window.onload = initMap;
</script>
